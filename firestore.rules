rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function getUInfo(uUid, cidMatch, minRole ) {
      let uInfo = get(/databases/$(database)/documents/Users/$(uUid)).data ;
      let roleOK = minRole == 'User' || uInfo.role == 'Admin' ;
      return (uInfo.activeU && (uInfo.role == 'globalAdmin' ||
        (cidMatch == uInfo.cid && roleOK))) ;
    }
    match /Transactions/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'User')) ;
      allow delete: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
    }
    match /demoTransactions/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'User')) ;
      allow delete: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
    }
    match /Reconciliations/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'User')) ;
      allow delete: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
    }
    match /Projects/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'User')) ;
      allow delete: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
    }
    match /GlobalVars/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'Admin')) ;
      allow delete: if (request.auth.uid != null &&
      			getUInfo(request.auth.uid, resource.data.Cid, 'Admin')) ;
    }
    match /Globals/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'Admin')) ;
      allow delete: if (request.auth.uid != null &&
      			getUInfo(request.auth.uid, resource.data.Cid, 'Admin')) ;
    }
    match /TranRules/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'Admin')) ;
      allow delete: if (request.auth.uid != null &&
      			getUInfo(request.auth.uid, resource.data.Cid, 'Admin')) ;
    }
    match /Houses/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'Admin')) ;
      allow delete: if (request.auth.uid != null &&
      			getUInfo(request.auth.uid, resource.data.Cid, 'Admin')) ;
    }
    match /Mortgages/{docId} {   // May have to vfy no chg to cid on write
      allow read: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'User')) ;
      allow create, update: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, request.resource.data.Cid, 'Admin')) ;
      allow delete: if (request.auth.uid != null &&
      			getUInfo(request.auth.uid, resource.data.Cid, 'Admin')) ;
    }
    match /Users/{userId} {
      allow write: if (request.auth.uid != null &&
      			getUInfo(request.auth.uid, request.resource.data.Cid, 'globalAdmin')) ;
      allow read:  if (request.auth.uid != null && (request.auth.uid == userId
      			|| getUInfo(request.auth.uid, request.data.Cid, 'globalAdmin'))) ;
    }
    match /newCustomer/{docId} {   // May have to vfy no chg to cid on write
      allow read, update, delete: if (request.auth.uid != null &&
            getUInfo(request.auth.uid, resource.data.Cid, 'globalAdmin')) ;
      allow create: if (request.auth.uid != null &&   // New user doing create, so signed and
        docId == request.auth.uid) ;  // new uid = what we are adding
    }
  }
}
